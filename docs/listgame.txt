===================
The listgame manual
===================

If you're on ##crawl on Freenode IRC, you can use listgame to see
game statistics for Crawl games played on the public Crawl servers
CAO (crawl.akrasiac.org), CDO (crawl.develz.org),
CSN (crawlus.somatika.net), and CSZO (crawl.s-z.org).

The bot Sequell responds to listgame queries on ##crawl, and on PM.

This document describes listgame: specifically, it covers the !lg and
!lm commands, as well as the specialised listgame commands !hs, !won,
etc.

NOTE: This document uses "listgame" to mean "!lg, !lm, !hs, etc..".
Where a specific command is described, that command is named
explicitly as "!lg", "!lm", etc.

!lg
---
Mnemonic: lg = Last Game or List Game

The !lg command queries completed games (i.e. games in the logfile)
on the public servers (currently crawl.akrasiac.org, crawl.develz.org
and rl.heh.fi).

Syntax
======

::
        !lg [<target-player> [<keyword1> <keyword2> ...]
                             [<game type>; viz 'crawl' or 'sprint']
                             [<field1><op1><value1> <field2><op2><value2> ...]
                             [s=<field1>,<field2> ;
                                         cannot be used with max= or min=]
                             [x=<field1>[,<field2>,...]]
                             [o=<aggregate-function or % or N>]
                             [max=<field> or min=<field>; not usable with s=]]
                             [<option>]
                             [<number>]

Where:
- <target-player> may be one of:
  1. <name>: a player name as used on public servers (such as 'elliptic')
  2. * to consider games by all players
  3. . to consider games by the person issuing the !lg command.
  4. Omitted altogether to consider games by the player issuing the
     !lg command. Using . is preferred when selecting your own games --
     !lg may not recognise keyword arguments if you skip the
     target-player-name.

  The player nick may be negated by prefixing it with !. For instance:
     !lg elliptic  (find elliptic's last game)
     !lg !elliptic (find the last game by anybody other than elliptic)

  The nick may optionally be prefixed by @. For instance:
     !lg @78291 (78291's last game)

  This is mainly useful for names that would otherwise be treated as
  game numbers.

- <keyword> is a word that the listgame parser recognises as a filter
  condition of some kind.

  See the section "Listgame Keywords" for a list of keywords.

- <game type> is one of "sprint", "crawl", or "zotdef" to select games
  of that game type. If the game type is not specified, standard Crawl
  games are assumed.

- <field><op><value>

  An expression of the form <field><op><value> compares the value of a
  logfile field to the provided value using the given operator.

  See the section "Logfile Fields" for a list of valid logfile fields
  and "Operators" for a list of valid operators.

  Values may contain embedded spaces. Underscores in values are
  converted to spaces before running listgame queries.

- s=<field1>[%],<field2>... or s=-<field>[%]

  Mnemonic: s = Summarise by field

  For a set of games matching the listgame query, s=<field> counts the
  number of occurrences of each value for the field in the matching
  games.

  For instance: "!lg * s=god" finds all the gods played on all public
  servers and displays the number of games for each god.

  Technical Note: s=<field> uses a SQL query that does "GROUP BY
  field" and shows the grouped field and COUNT(*) for each group.

  Not all fields can by used to summarise: fields with too many
  distinct values (such as score or turn count) are not allowed as
  summary fields.

  When summarising, results are sorted in descending order of the
  count for each group by default. To sort by ascending order instead,
  use s=-field instead of s=field

  You may use only one s=X form per query.

  If the field name is suffixed with a %, the query will also show what
  percentage of the total each group is. For instance:

  !lg * win s=name%

  Shows the names of all players who have won games and what
  percentage of the total wins on the server they have.

- x=<field>[,<field1>,...]

  Mnemonic: x = eXamine field

  x allows you to request extra fields for display for a given
  listgame game. The values of some fields are not displayed normally
  (for instance fields like 'str', 'int', 'dex'). Using x=field forces
  display of the value of the field.

  In addition to simple field names, you can request aggregate
  expressions for fields as x=aggregate(field).

  Example: !lg * x=avg(turn) shows average turn count of all games
           !lg * x=avg(dur),max(turn) shows average duration and the max
                                      turn count.

  You cannot mix x=field and x=aggregate(field) in the same listgame
  query, i.e. you can use either simple fields or aggregates, but not
  both at once.

  You can combine x=aggregate(field) with s=field:

  !lg * s=god x=avg(xl) summarise by god and show the average XL for players
                        of each god.

  See the "Aggregate Functions" section for a list of aggregate
  functions.

  You may use only one x=A,B,C form per query.

- o=<aggregate-expr> or o=-<aggregate-expr>
  Mnemonic: o = Order By

  When used in queries of the form:

  !lg * s=<thing> x=aggregate(field) o=aggregate(field)

  the results are sorted in descending order by the value of
  aggregate(field) instead of the default sort of the descending order
  of counts for each group.

  If you want an ascending order sort, use o=-aggregate(field)

  You may use only one o=X form per query.

- max=<field> or min=<field>

  By default listgame finds the most recently completed game matching
  the search criteria. This can be changed by using max=<field> or
  min=<field> to find the game with the maximum or minimum values for
  the given field instead.

  For instance: "!lg * win min=dur" finds the fastest win by real time
  spent. "!lg * win max=turn" finds the slowest win by turns used.
  "!lg * win min=start" finds the winning game with the earliest start
  time, and so on.

  You may use only one max= or min= operation per query, and you may
  not combine it with o=, or s=

- <option>
  Some options modify the behaviour of !lg:
  * -log  Get a URL to the game morgue instead of displaying the game details.
  * -tv   Play the game on FooTV instead of displaying details. See
          the "FooTV" section.
  * -ttyrec Get URLs to the game's ttyrecs.
  These options are not applicable to summary queries (queries using s=foo)

- <number>

  Given any valid listgame query, there is a set of N games matching
  the query, where N >= 0.

  For instance, given a query for wins:

  !lg * win

  Listgame will show *one* game matching the query as:
  [N]. X the Y ...  escaped with the Orb ...

  Where [N] is the number of games that matched the query. The game
  shown is always the *last* game that matched the query in whatever
  sort order is in use. The default sort order is max=end, so the
  game shown is the last ended game by default.

  If you do not want to see the *last* game, you may specify a game
  number to use instead. The default game shown is "-1", so you may
  request "-2" to see the second-last game, "-3" to see the third last
  game and so on.

  You may also use positive indexes: "1" to find the first game, "2" to
  get the second game and so on. For instance:

  !lg * 1 (find the first game ended on any of the public servers)
  !lg * win -1 (find the most recent winning game:: same as !lg * win)
  !lg * win -2 (find the second-last winning game)

  When you combine a game number with max or min, you're using an index
  into games ordered by that field:

  !lg * max=dur -2  (find the second longest game by real time spent)
  !lg * win min=turn -3 (find the third fastest win by turn count)

Experimental Syntax
===================

The syntax used in this section is available for !lg and !lm, but is
experimental, and may be buggy. Syntax described here may be
reworked/removed at any time without warning.

!lg may also be used to calculate ratios using queries of the form:

  !lg * <expressions-A> s=<something> / <expressions-B>

In this case, *two* queries are executed:

  !lg * <expressions-A> s=<something>
  and
  !lg * <expressions-B> <expressions-A> s=something

i.e. a broad query is run first (expressions-A), and then narrowed
using extra conditions (expressions-B AND expressions-A), and a ratio
of the counts for A&B to the counts for A is calculated. This is handy
for calculating percentages for things such as:

  "!lg * s=god / win" (find the win rate for each god as a percentage
                       of games played)

  "!lg * DE s=char / win" (find the win rate for each deep elf class as
                           a percentage of games played)

  "!lg * Gh s=char / god=Xom" (find the percentage of Xom worshippers
                               as a percentage of Ghoul games grouped
                               by character)

When using the !lg ... s=foo / ... form, the groups are sorted by
descending order of percentage. You may change the sort by explicitly
specifying o=% (descending) or o=-% (ascending).

NOTE: In ratio queries you may use multiple sort conditions:

"!lg * s=char / win o=N,%" Show win rates of different characters, sorting
                           by number of wins, and subsorting by win percentage.

You may also perform rudimentary extended filtering when using the !lg
ratio form. ?: <expr> requests extended filtering and must always be
the *last* thing on the !lg line.

!lg * s=char / win o=% ?: N>0 (show all characters sorted by win-rate,
                               excluding unwon characters)

!lg * s=name / win o=% ?: den.N>10 (show players by win rate, excluding
                                    players with <= 10 games.)

!lg * s=name / win o=% ?: N>10 (show players by win rate, excluding
                                players with <= 10 *winning games*.)
                                    
Use %>0 or %=0 to select groups where the *percentage* is nonzero or 0.

Use N>0 or N=0 to select only groups where the numerator is >0 or =0.
The numerator is the count from the more *specific* query.

Use den.N if you want to filter by denominator instead of numerator.
The denominator is the count from the more *general* query.
                           
!lm
---
Mnemonic: lm = Last Milestone or List Milestone

The !lm command queries game milestones (i.e. entries in the
milestones file) for games on the public servers. !lm syntax is the
same as !lg, with a few nuances:

- You may use milestone fields (see the "Milestone Fields" section for
  a list) OR logfile fields in !lm queries. If you use logfile fields
  in your filter condition, your query searches for milestones
  belonging to a completed game matching that filter condition.

  For instance:
  "!lm * rune win" finds the most recent rune milestone from a winning game.
  "!lm * rune killer=centaur" finds the most recent rune milestone from
                              a game where the character died to a centaur.

  In some cases you may want to check the value of a logfile field even
  though milestones also have a field of the same name. For instance, if
  you want to see the last orb milestone by a player who died on D:1, you'd
  use "!lm * orb lg:place=D:1". Qualifying a field X as lg:X forces
  the search to use the value of X from the game itself, not from the
  milestone.

- Milestone Options:

  -tv   plays back the portion of the game just before and after the chosen
        milestone.
  -log  gets the URL to the character dump of the game corresponding to
        the chosen milestone. If the milestone is a crash milestone,
        gets the URL to the crash dump instead.
  -ttyrec gets the URL to the single ttyrec that contains the chosen
        milestone.

  -game gets the game correponding to the chosen milestone.
        Example:
        "!lm * rune !win -game" finds the non-winning game corresponding to
                                the most recent milestone.
                                
        You may combine -game with the usual -log, -tv, and -ttyrec
        options.

- s=<milestone-type>
  !lm queries provide a special form of the s=<field> summary operation.
  You may use s=<milestone-type> instead of the longer
  form: type=<milestone-type> s=noun

  Example: "!lm * s=rune" is the same as "!lm * type=rune s=noun"
           "!lm * s=abyss.enter" == "!lm * type=abyss.enter s=noun"

- <milestone-type>=<milestone-noun>
  !lm queries provide a special filter form "X=Y" to simplify the
  common query "type=X noun=Y"

  Example: "!lm * rune=barnacled" = "!lm * type=rune noun=barnacled"
           "!lm * god.worship=Lugonu" = "!lm * type=god.worship noun=Lugonu"

           
!hs
---
Mnemonic: hs = High Score

The !hs command is identical in behaviour to the !lg command with an
implied max=sc to show the highest scoring game matching the search
criteria.

Examples:
"!hs *"              Highest scoring game
"!hs * DEFE -2"      Second-highest score by a Deep Elf Fire Elementalist.

!won
----

The !won command shows winning games by the named player, or by all
players.

Examples:

"!won elliptic"  elliptic's winning games
"!won *"         winning games for all players

!won accepts most of the filters that !lg does, but currently does not
accept the game type selection keyword ("sprint").

In addition to basic win stats, you can specify a number of wins to
skip. For instance:

"!won stabwound 5"  shows stabwound's win stats, skipping the first 5 wins.

!gamesby
--------

!gamesby gives general stats for games played by a particular player
or by all players, and accepts !lg-style filters.


Listgame Keywords
-----------------

Listgame keywords are words (containing no spaces) that the listgame
parser recognises as a filter condition of some kind.

Keywords may be negated by prefixing them with !. For instance::
  !lg * HuBe   (find the last HuBe game)
  !lg * !HuBe  (find the last non-HuBe game)

Listgame keywords may be one of:

1. Species abbreviations such as 'Ke', 'Hu', etc. For any species
   abbreviation XX used as a keyword, the !lg query is restricted as
   race=XX. NOTE: for abbreviations such as 'Hu' and 'He' that may
   reasonably be interpreted as both species and class
   abbreviations, the query becomes (race=Hu OR cls=Hu).
   
2. Class abbreviations such as 'He', 'Cr', etc. For any class
   abbreviation XX used as a keyword, the !lg query is restricted as
   cls=XX. NOTE: abbreviations such as 'Hu' that may be either species
   or class abbrevations are interpreted as (race=Hu OR cls=Hu).

3. Species + Class abbreviation such as 'HuWr' or 'DrFE' :: selects only
   games for that character combination (for instance: HuWr => char=HuWr)

4. Death types:
   - won / win / winning :: select only winning games.
   - quit                :: select only quitters
   - left / leaving      :: select escapes without the orb.
   - drown               :: select drowning deaths.
   - pois                :: deaths by poison
   - cloud               :: deaths by cloud
   - starvation          :: deaths by starvation

5. Place names:
   Recognisable place names such as "D:10", "Temple", etc. will select
   games that ended at that place. If you're looking for a place that
   the listgame parser does not recognise (such as a new portal vault),
   use the full "place=XYZ" form instead.

   Note that you can use a full place name such as "Swamp:3" to
   select games on that level, or a branch name such as "Snake" to
   select games that ended in that branch.

6. God names:

   Recognisable god name prefixes/abbreviations such as "ely", "nem",
   "tso", "kik", "jiy".
   
7. Game versions:
   - X.Y where X and Y are numbers finds games of versions X.Y, including
     minor versions (X.Y.0, X.Y.1, etc.)
   - X.Y.Z finds games matching that version number exactly.

8. Public server abbreviation:
   cao / cdo / rhf / csn / cszo :: selects games from the corresponding
                                   public server.

9. Player nick or nick alias:
   @nick  :: selects games by that player or nick alias. See the section
             on nick aliases below.

10. alpha :: selects games for alpha (unstable/development) versions.

11. tiles :: selects games played in webtiles.

12. Tournament selector:

    t    :: Select games played in the most recent Crawl tournament
    t<N> :: Select games played in the tournament for year 200<N>.
            For instance t9 selects the 2009 tourney, t8 selects the 2008
            tourney

13. Milestone Types:
    In !lm queries ONLY (i.e. not in !lg, !hs, etc.) you may use the
    milestone type as a keyword:

    abyss.enter abyss.exit rune orb ghost, etc.

    Example: "!lm * abyss.enter" (the last milestone for a player
                                  entering the Abyss)

Logfile Fields
--------------

This is a description of the fields available for !lg queries. Most of
the fields here are described as in the Crawl xlogfile; some of the
fields are generated by Sequell as they are loaded into the SQL
database.

id:
A unique numeric id (integer) associated with the game.

v:
Game version. Example: "0.6.0", "0.7.0-a0"

lv:
Logfile format version

src:
Public server abbreviation. One of "cao", "cdo", "rhf".

sc/score:
Game score (integer)

name:
Player name

game_key/game_id/gid:

The id (a string key) that is shared by the milestone and its
corresponding logfile entry, based on the player name, the server they
were playing on, and the start time of their game.

All milestones for the same game will share the same game_key.

game_keys should be unique to their games, barring bugs.


race/sp/species/r:
Character race (for instance: "Deep Dwarf")

crace:
Canonicalised character race with draconians merged. For instance,
when race = "Red Draconian", crace = "Draconian".

class/cls/role/c:
Character class or job. Example: "Berserker", "Wanderer"

char/ch:
Character species+class abbreviation. Example: "SENe", "DrSt"

xl:
Character experience level (integer)

sk:
Character's best skill (string)

sklev:
Character's best skill's level (integer)

title:
Character's skill title. Example: "God of Death", "Ruinous", etc.

ktyp/ktype:
Killer Type, or how the game ended. Example: "winning", "mon", "lava", etc.

killer:
The monster or thing responsible for the player's death. Example: "a
hobgoblin", "Sigmund", "a five-headed hydra", "Ghib".

ckiller:
Canonicalised killer: a cleaned-up killer field, with hydras merged
into one, and an attempt at recognising Pan lords. If the killer field
is empty, ckiller is set to the value of ktyp instead.
Example: "a hobgoblin", "Sigmund", "a hydra", "a pandemonium lord" etc.

ikiller:
Indirect killer: If the killer is a summoned monster or a band member,
this field names the monster that summoned it, or its band leader.
Example: ikiller=Mara ckiller=a player illusion killer=Johan's illusion

kpath:
In the case where killer!=ikiller, kpath specifies the full blame chain
accounting for the presence of the killer.
Example: "woven by Mara"

kmod:
In cases where the killer is a zombie or some other derived undead, or
a shapeshifter, kmod specifies the kind of undead.
Example: "zombie", "simulacrum", "shapeshifter"

kaux:
The thing used by 'killer' to cause the player's demise. Usually a
description of the weapon or the ranged attack used to kill the
player, or the trap that was triggered that killed the player.
Example: "a +0,+0 club", "orb of energy", "dart",
         "Shot with an arrow by a centaur"

ckaux:
Canonicalised kaux, a cleaned up kaux value.
Example: "club", "orb of energy", "dart", "an arrow"

place:
Place of death.
Example: "D:1", "Abyss", "Geh:7", "Temple"

br:
Branch of the dungeon at the time of death.
Example: "D", "Geh", "Temple"
NOTE: br will always be the main dungeon branch the player was in most
recently. If the player was banished from the Temple and died in the
Abyss, then place=Abyss but br=Temple. Similarly if the player visited
a Sewer on D:4 and died there, place=Sewer but br=D

lvl:
The depth in the player's most recent dungeon branch (integer).
Example: place=D:6 => br=D and lvl=6

ltyp:
The level area type the player was in.
Example: "D", "Abyss", "Pan", "Lab", "Port"
place=Abyss => ltyp=Abyss
place=Temple => ltyp=D
place=Sewer => ltyp=Port

hp:
Player's hp at end of game (integer)

mhp:
Player's max hp at end of game (integer)

mmhp:
Player's unrotted max hp at end of game (integer)

dam:
Damage of the killing blow (integer)

str, int, dex:
Player's strength, intelligence, dexterity at end of game (integer)

god:
Player's god at end of game
Example: "Xom", "Nemelex Xobeh"

piety:
Player's piety (integer)

pen:
Player's penance (integer)

start:
Game start time (date)

end:
Game end time (date)

rstart:
Raw game start time string. Example: "20100727203959S". Note
that the raw time string has 0-based months (i.e. January is 0 and
December is 11)

rend:
Raw game end time string. Same as rstart, but for the game end time.

dur:
Game duration in seconds (integer). Note that idle times are clamped.

turn/turns:
Game turn count (integer)

urune:
Number of unique runes in player inventory at end of game (integer).

nrune:
Total number of runes in player inventory at end of game (integer).

tmsg:
Terse game end message.

vmsg:
Verbose game end message. Usually identical to tmsg.

alpha:
"y" if the game is an alpha/development version, empty otherwise.

tiles:
"y" if the game is in webtiles, empty otherwise.

map:
The name of the map/vault the player was in at end of game. Example:
"hall of Zot". NOTE: underscores in map names will be replaced by spaces
when stored in the database.

mapdesc;
A human-readable description for the map in which the player was at
end of game, usually empty. Example: 'Sprint II: "The Violet Keep of Menkaure"'

Milestone Fields
----------------

Milestones have many of the same fields as logfiles, but the values for
these fields are obviously the value of that attribute at the time the
milestone was generated, not at end of game.

Fields in common with logfile:
alpha, v, cv, name, race, crace, cls, char, xl, sk, sklev, title,
place, br, lvl, ltyp, hp, mhp, mmhp, str, int, dex, god, dur, turn,
urune, nrune, rstart, tiles

These fields are unique to milestones:

id:
A unique numeric id (integer) associated with the *milestone*. Note
that the id field for milestones is quite different from the id field
for logfile records.

game_key/game_id/gid:

The id (a string key) that is shared by the milestone and its
corresponding logfile entry, based on the player name, the server they
were playing on, and the start time of their game.

All milestones for the same game will share the same game_key.

time:
The exact time the milestone was generated (date)

rtime:
The raw time string for the time the milestone was generated. Example:
"20100727203959S". Note that the raw time string has 0-based months
(i.e. January is 0 and December is 11)

verb/type:
The type of milestone. Example: "ghost" (player killed a ghost),
"uniq" (player killed a unique), "orb" (player found the orb of Zot).
You can use "!lm * s=type" to see a list of milestone types.

noun:
The object of interest in the milestone. For instance if type=ghost,
noun=Foo's ghost. You can use "!lm * type=X s=noun" to see a list
of nouns for that milestone.

milestone:
The full description of the milestone. Example: "entered a Sewer."

oplace:
For milestones generated for entering a branch or portal vault, describes
the original place the player entered the branch/portal. Example:
milestone=entered a Sewer. oplace=D:3

Operators
---------

Listgame expressions may use these operators:

=    equals (important: see note below)
!=   not-equal
==   exact equals
!==  exact not-equals
<    less-than
>    greater-than
<=   less-than-or-equal
>=   greater-than-or-equal
=~   glob match (see below)
!~   glob not match
~~   POSIX regexp match
!~~  POSIX regexp not match

(( )) grouping parentheses (note: must be doubled)
||   Boolean OR

Equals (=) is not very equal
============================
The = operator is *not* an exact equality operator; it uses several
heuristics to fix common broken queries. These heuristics depend on
the field used in the comparison:

killer/ckiller/index:
~~~~~~~~~~~~~~~~~~~~~
Queries of the form killer=X (Example: killer=hobgoblin) are
translated as (killer='X' OR killer='a X' OR killer='an X'). This
allows users to use killer=rat instead of the more verbose killer=a rat.

Queries of the form killer=uniq are translated into a query to find
all killer values that do not start with "a " and "an " and do not
contain the word "ghost".

place:
~~~~~~
Queries of the form place=X (where X is a branch that has more than
one level) are converted into the form place=~X:*, to match all games
in that branch. Example: "!lg * place=Orc" is the same as "!lg *
place=~Orc:*"

race/crace:
~~~~~~~~~~~
Queries of the form race=XX where XX is a species abbreviation are
converted into the form race=Species where Species is the full name
of the species. Example: "!lg * race=Hu" => "!lg * race=Human"

class:
~~~~~~
Queries of the form cls=XX where XX is a class abbreviation are
converted into the form cls=Class where Class is the full name.
Example: "!lg * class=He" => "!lg * class=Healer"

<any>:
~~~~~~
Any X=Y query will be converted to an X~~Y query if Y contains these
regex metacharacters: ()|?

If you want to test (in)equality without any mangling, use == or !==

Glob Matches
============
=~ performs a glob match, or a simple substring match.

For instance "tmsg=~hobgoblin" finds terse messages containing the
substring "hobgoblin". You may also use the * and ? wildcards, but if
you use a wildcard and want a substring match, you must prefix and
suffix your search pattern with * as: "tmsg=~*hob???lin*"

Aggregate Functions
-------------------

The available aggregate functions [usable as x=aggregate(field)]:

1. avg (average)
2. max (maximum value)
3. min (minimum value)
4. sum
5. std (standard deviation)
6. variance
7. cdist (count distinct)

You may use avg, sum, std and variance only for numeric fields.

max, min, cdist may also be used on text (character) fields.


Nick Aliases
------------

The !nick command maps IRC nicks to names used on public servers:

Syntax
======

  !nick ircnick charactername1 [charactername2 ...]
  !nick -rm ircnick
  !nick -rm . charactername1

The listgame commands normally assume that the user's IRC nick is the
same as their player name on the public server. For instance, when
a person with the IRC name 'aardvark' runs the query "!lg .", Sequell
expects that aardvark plays their games using the same name "aardvark"
on the public servers. Let's assume aardvark actually plays their games
as "kravdraa" on the public servers (as a contrived example).

aardvark may then query their games using "!lg kravdraa", or they may
create a *nick mapping* from aardvark -> kravdraa as:

!nick aardvark kravdraa

after which aardvark can run listgame queries as "!lg ." and find
games played under the name kravdraa.

It's also possible that aardvark plays their games under two names:
aardvark and kravdraa, and would like listgame queries to find games
under both those names. aardvark can do that by running:

!nick aardvark kravdraa aardvark

Once a nick mapping is established, all listgame commands will use the
mapping.

You can bypass nick mappings in listgame queries by using an explicit
name=foo expression:

  "!lg * name=elliptic"  finds games by elliptic, without applying nick
                         mappings.

You can delete a nick mapping using:

!nick -rm <ircnick>
or
!nick -rm . <servercharactername>


FooTV
-----

FooTV is a channel on termcast.develz.org (telnet termcast.develz.org
to watch) that plays games requested using the -tv option.

TV options
==========
-tv               starts playback of the selected game on FooTV
-tv:cancel        cancels playback of the selected game on FooTV
-tv:nuke          cancels playback of *all* previous games selected for FooTV
-tv:<N            starts playback N times farther from the end. -tv normally
                  starts playback a little way before the end of game, or
                  a little way before the milestone (when used with !lm).
                  If you'd like to start twice as far back, you can use -tv:<2
                  or -tv:<N in general. N can be <1 (-tv:<0 or -tv:<0.5 are
                  both valid).
-tv:>N            ends playback at Nx the normal time after the milestone.
                  This is only relevant when used with !lm
-tv:>$            continues playback to the end of the ttyrec (note: not end
                  of game)

-tv:T[turncount]  Start playback before the given turncount (if not divisible
                  by 100, rounds up to the next highest turn. For milestones,
                  this is the same as >T[turncount], i.e. this is the end of
                  playback
-tv:>T[turncount] End playback near the given turncount (rounded up to
                  nearest 100)
-tv:<T[turncount] Start playback near the given turncount (rounded down to
                  nearest 100)
-tv:T[+-][delta]  Playback to the turn count of the milestone (or end
                  of game)
-tv:x[N]          Change playback speed. For instance, -tv:x5 plays back the
                  game at 5x normal speed.

TV seek options may be combined:

!lm * br.end=Zot -tv:<0:>$

(Watch the last character who reached Zot:5 from the moment they enter
Zot:5, continuing till the end of that game session).

Play from turn 100 - 5000 (approximately) of the most recent winning game:

!lg * win -tv:<T100:>T5000

Play most recent golden-rune milestone, but continue 3000 turns past
the milestone:

!lm * rune=golden -tv:T+3000

Note: turn-based playback will work only for relatively recent Crawl
games. Games from very old versions lack the timestamp files that
FooTV needs to match turn counts to UTC times.


Examples
--------

!lg                               Show your most recent game.
!lg .                             (ditto)

!lg . DEFE                        Your most recent DEFE game.
!lg test                          test's most recent game.
!hs * GhEn                        Highest scoring GhEn game.
!hs * !win -3                     Third-highest scoring non-winning game.
!lg * s=name                      Number of games played by each player
!lg * race=Gh s=name              Number of ghoul games played by each player
!lg @78291 s=char                 Characters played by 78291
!lg * race=DS god=Xom ktyp=water  Last Xom-worshipping Demonspawn drowning
!lg * DS Xom drown                (ditto)
!lg * killer=uniq s=-killer       Kills by uniques, rarest uniques first.
!lg * DS x=ckaux                  Last DS game, showing ckaux value.
!lg * !DS                         Last non-DS game
!lg * ((xom || nemelex))          Last Xom or Nemelex game.
!lg * god=Xom|Nemelex             (ditto)
!lg * win min=turn                Fastest win (turncount)
!lg * xl>20 min=turn              Fastest win (turncount) for characters with
                                  XL>20.
!lm * rune s=god                  Summary of gods worshipped at the time of
                                  finding runes.
!lg * s=ktyp                      Show all the different types of death
!lg * s=ckiller                   Show all the different monsters/types of death
!lg qwqw D:10 -log                Get the character dump for qwqw's last game
                                  that ended on D:10
!lg @78291 Zot 1 -log             Get the character dump for 78291's first
                                  Zot death.
!lm * orb min=turn -tv            Watch the fastest Orb grab (turn count) on
                                  FooTV.
!lm * rune=golden min=xl -tv      Watch the lowest-experience character to
                                  fetch the golden rune doing their rune grab
                                  on FooTV.
!lm * br.enter=Tomb -tv:<0:>20    Watch the last character to reach Tomb:3,
                                  but start playback as the character descends
                                  the stairs and play 20 times more of the
                                  ttyrec than FooTV normally would.
!lm * rune=obsidian lg:place=Coc  Last obsidian-rune (Geh) milestone for a game
                                  that ended in Cocytus.
